import { useState } from "react";
import {
  Download,
  FileText,
  Share2,
  Printer,
  Sparkles,
  TrendingUp,
  Clock,
  BarChart3,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";

function ReportGenrator({ result, recordingTime }) {
  const [isGenerating, setIsGenerating] = useState(false);

  if (!result) return null;

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, "0")}`;
  };

  const getCategoryDisplayText = (category) => {
    const displayTexts = {
      high: "High",
      medium: "Medium",
      low: "Low",
      unclear: "Unclear",
    };
    return displayTexts[category] || category;
  };

  const generateReportContent = () => {
    const timestamp = new Date().toLocaleString();
    const pace = result.pace || { category: "unclear", description: "No data" };
    const pitch = result.pitch || {
      category: "unclear",
      description: "No data",
    };
    const volume = result.volume || {
      category: "unclear",
      description: "No data",
    };

    return `
VOICE ANALYSIS REPORT
Generated on: ${timestamp}

RECORDING DETAILS
Duration: ${formatTime(recordingTime)}
Speech Detected: ${result.speechDetected ? "Yes" : "No"}
Overall Confidence: ${result.confidence || 0}%

DETAILED ANALYSIS

Pace Analysis: ${getCategoryDisplayText(pace.category)}
${pace.description}

Pitch Analysis: ${getCategoryDisplayText(pitch.category)}
${pitch.description}

Volume Analysis: ${getCategoryDisplayText(volume.category)}
${volume.description}

AI COACH FEEDBACK
Your speaking patterns show ${
      result.confidence >= 70
        ? "strong"
        : result.confidence >= 50
        ? "moderate"
        : "developing"
    } communication skills. 
${
  pace.category === "high"
    ? "Consider slowing down your speech pace for better clarity."
    : ""
}
${
  pace.category === "low"
    ? "You might benefit from slightly increasing your speaking pace."
    : ""
}
${
  volume.category === "low"
    ? "Speaking with more volume could improve your presence."
    : ""
}
${
  volume.category === "high"
    ? "Your volume is strong - maintain good projection."
    : ""
}

RECOMMENDATIONS
- Practice recording yourself regularly to track improvement
- Focus on maintaining consistent pace and volume
- Use vocal warm-up exercises before important conversations
- Consider professional speaking coaching for advanced development

---
Report generated by Voice Analysis AI
    `.trim();
  };

  const downloadTxtReport = () => {
    setIsGenerating(true);
    const content = generateReportContent();
    const blob = new Blob([content], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `voice-analysis-report-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    setTimeout(() => setIsGenerating(false), 1000);
  };

  const downloadJsonReport = () => {
    setIsGenerating(true);
    const reportData = {
      timestamp: new Date().toISOString(),
      recording: {
        duration: recordingTime,
        speechDetected: result.speechDetected,
        confidence: result.confidence,
      },
      analysis: {
        pace: result.pace,
        pitch: result.pitch,
        volume: result.volume,
      },
      metadata: {
        generatedBy: "Voice Analysis AI",
        version: "1.0",
      },
    };

    const blob = new Blob([JSON.stringify(reportData, null, 2)], {
      type: "application/json",
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `voice-analysis-data-${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    setTimeout(() => setIsGenerating(false), 1000);
  };

  const printReport = () => {
    const content = generateReportContent();
    const printWindow = window.open("", "_blank");
    if (printWindow) {
      printWindow.document.write(`
        <html>
          <head>
            <title>Voice Analysis Report</title>
            <style>
              body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 40px; 
                line-height: 1.8; 
                color: #333;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
              }
              .report-container {
                background: white;
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                max-width: 800px;
                margin: 0 auto;
              }
              h1 { 
                color: #7c3aed; 
                border-bottom: 3px solid #7c3aed; 
                padding-bottom: 15px; 
                font-size: 2.5em;
                text-align: center;
                margin-bottom: 30px;
              }
              .section { 
                margin: 25px 0; 
                padding: 20px;
                background: #f8fafc;
                border-radius: 12px;
                border-left: 5px solid #7c3aed;
              }
              pre { 
                white-space: pre-wrap; 
                font-family: 'Courier New', monospace;
                font-size: 14px;
              }
            </style>
          </head>
          <body>
            <div class="report-container">
              <pre>${content}</pre>
            </div>
          </body>
        </html>
      `);
      printWindow.document.close();
      printWindow.print();
    }
  };

  const shareReport = async () => {
    const content = generateReportContent();

    if (navigator.share) {
      try {
        await navigator.share({
          title: "Voice Analysis Report",
          text: content,
        });
      } catch (error) {
        console.log("Error sharing:", error);
        navigator.clipboard.writeText(content);
        alert("Report copied to clipboard!");
      }
    } else {
      navigator.clipboard.writeText(content);
      alert("Report copied to clipboard!");
    }
  };

  return (
    <div className="relative overflow-hidden">
      {/* Animated background elements */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="absolute top-10 left-10 w-20 h-20 bg-purple-300/20 rounded-full animate-bounce"></div>
        <div className="absolute bottom-10 right-10 w-16 h-16 bg-blue-300/20 rounded-full animate-pulse"></div>
        <div className="absolute top-1/2 left-1/4 w-12 h-12 bg-pink-300/20 rounded-full animate-ping"></div>
      </div>

      <Card className="relative bg-white/90 backdrop-blur-xl border border-purple-200/50 shadow-2xl overflow-hidden">
        <div className="relative z-10">
          <CardHeader className="text-center pb-8">
            {/* AI Logo positioned properly */}
            <div className="flex justify-center mb-6">
              <div className="relative">
                <div className="w-20 h-20 bg-gradient-to-r from-purple-600 via-blue-600 to-indigo-600 rounded-full flex items-center justify-center shadow-lg">
                  <Sparkles
                    className="w-10 h-10 text-white animate-spin"
                    style={{ animationDuration: "3s" }}
                  />
                </div>
                <div className="absolute inset-0 w-20 h-20 bg-gradient-to-r from-purple-400 to-blue-400 rounded-full animate-ping opacity-30"></div>
              </div>
            </div>

            <CardTitle className="text-4xl font-bold bg-gradient-to-r from-purple-600 via-blue-600 to-indigo-600 bg-clip-text text-transparent mb-4">
              Export Your Analysis
            </CardTitle>
            <p className="text-gray-600 text-lg">
              Save your voice insights in multiple formats and share your
              progress
            </p>
          </CardHeader>

          <CardContent className="space-y-8">
            {/* Stats Grid with fixed borders */}
            <div className="relative">
              <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-2xl p-8 border border-purple-200 shadow-lg">
                <div className="grid grid-cols-2 md:grid-cols-4 gap-6">
                  {[
                    {
                      icon: TrendingUp,
                      value: `${result.confidence}%`,
                      label: "Confidence",
                      color: "purple",
                    },
                    {
                      icon: Clock,
                      value: formatTime(recordingTime),
                      label: "Duration",
                      color: "blue",
                    },
                    {
                      icon: BarChart3,
                      value: getCategoryDisplayText(result.pace?.category),
                      label: "Pace",
                      color: "green",
                    },
                    {
                      icon: FileText,
                      value: getCategoryDisplayText(result.volume?.category),
                      label: "Volume",
                      color: "orange",
                    },
                  ].map((stat, index) => (
                    <div key={index} className="text-center group">
                      <div
                        className={`w-16 h-16 mx-auto mb-3 rounded-full bg-gradient-to-r ${
                          stat.color === "purple"
                            ? "from-purple-400 to-purple-600"
                            : stat.color === "blue"
                            ? "from-blue-400 to-blue-600"
                            : stat.color === "green"
                            ? "from-green-400 to-green-600"
                            : "from-orange-400 to-orange-600"
                        } flex items-center justify-center shadow-lg transform group-hover:scale-110 transition-all duration-300`}
                      >
                        <stat.icon className="w-8 h-8 text-white" />
                      </div>
                      <div
                        className={`text-2xl font-bold mb-1 ${
                          stat.color === "purple"
                            ? "text-purple-600"
                            : stat.color === "blue"
                            ? "text-blue-600"
                            : stat.color === "green"
                            ? "text-green-600"
                            : "text-orange-600"
                        }`}
                      >
                        {stat.value}
                      </div>
                      <div className="text-sm text-gray-600 font-medium">
                        {stat.label}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            <Separator className="bg-gradient-to-r from-purple-200 via-blue-200 to-indigo-200 h-[2px]" />

            {/* Enhanced Export Options */}
            <div className="space-y-6">
              <div className="flex items-center justify-center space-x-3 mb-6">
                <FileText className="w-8 h-8 text-purple-600" />
                <h3 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
                  Choose Your Export Format
                </h3>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {[
                  {
                    action: downloadTxtReport,
                    icon: Download,
                    title: "Text Report",
                    description: "Human-readable format",
                    gradient: "from-blue-500 to-blue-600",
                    hoverGradient: "hover:from-blue-600 hover:to-blue-700",
                  },
                  {
                    action: downloadJsonReport,
                    icon: Download,
                    title: "JSON Data",
                    description: "Machine-readable format",
                    gradient: "from-purple-500 to-purple-600",
                    hoverGradient: "hover:from-purple-600 hover:to-purple-700",
                  },
                  {
                    action: printReport,
                    icon: Printer,
                    title: "Print Report",
                    description: "Physical copy",
                    gradient: "from-green-500 to-green-600",
                    hoverGradient: "hover:from-green-600 hover:to-green-700",
                  },
                  {
                    action: shareReport,
                    icon: Share2,
                    title: "Share Results",
                    description: "Copy to clipboard",
                    gradient: "from-orange-500 to-orange-600",
                    hoverGradient: "hover:from-orange-600 hover:to-orange-700",
                  },
                ].map((option, index) => (
                  <Button
                    key={index}
                    onClick={option.action}
                    disabled={isGenerating}
                    className={`relative h-20 bg-gradient-to-r ${option.gradient} ${option.hoverGradient} text-white border-0 shadow-xl hover:shadow-2xl transform hover:scale-105 transition-all duration-300 overflow-hidden group`}
                  >
                    {/* Button background effect */}
                    <div className="absolute inset-0 bg-white/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>

                    <div className="relative z-10 flex items-center justify-center space-x-4">
                      <div className="p-2 bg-white/20 rounded-full">
                        <option.icon className="w-6 h-6" />
                      </div>
                      <div className="text-left">
                        <div className="font-bold text-lg">{option.title}</div>
                        <div className="text-sm opacity-90">
                          {option.description}
                        </div>
                      </div>
                    </div>

                    {isGenerating && (
                      <div className="absolute inset-0 bg-black/20 flex items-center justify-center">
                        <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                      </div>
                    )}
                  </Button>
                ))}
              </div>
            </div>

            {/* Enhanced Tips Section with fixed borders */}
            <div className="bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-2xl p-6 shadow-lg">
              <div className="flex items-center mb-4">
                <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center mr-3">
                  <span className="text-white text-xl">💡</span>
                </div>
                <h4 className="font-bold text-xl bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                  Pro Tips & Insights
                </h4>
              </div>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {[
                  "📊 JSON format is perfect for data analysis and progress tracking",
                  "📝 Text format is ideal for sharing with coaches and mentors",
                  "🖨️ Print reports to maintain physical records of improvement",
                  "🔗 Share results to get valuable feedback from peers",
                ].map((tip, index) => (
                  <div
                    key={index}
                    className="flex items-center p-3 bg-white/60 rounded-lg border border-blue-200"
                  >
                    <span className="text-blue-700 text-sm font-medium">
                      {tip}
                    </span>
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
        </div>
      </Card>
    </div>
  );
}

export default ReportGenrator;
